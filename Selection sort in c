Selection sort is a simple sorting algorithm. This sorting algorithm is an in-place comparison-based algorithm in which the list is divided into two parts, the sorted part at the left end and the unsorted part at the right end. Initially, the sorted part is empty and the unsorted part is the entire list.
The smallest element is selected from the unsorted array and swapped with the leftmost element, and that element becomes a part of the sorted array. This process continues moving unsorted array boundary by one element to the right.
//Algorithm of selection sort in c
Step 1 − Set MIN to location 0
Step 2 − Search the minimum element in the list
Step 3 − Swap with value at location MIN
Step 4 − Increment MIN to point to next element
Step 5 − Repeat until list is sorted
//Code of selection sort in c
#include<stdio.h>
#include<stdlib.h>
void selectionSort(int n,arr[])
{
  int temp;
  for(int i=0;i<n;i++)
  {
    int min=i;
    for(int j=i+1j<n;j++)
    { 
      if(a[j]<a[min])
      {
       min=j;
      }
    }
    temp=a[i];
    a[i]=a[min=;
    a[min]=temp;
  } 
      
 }
 //Main Function 
 int main()
 {
   int n,int arr[1000];
   printf("Enter number of elements \n");
   scanf("%d",&n);
   printf("Enter  elements of arrays \n");
   for(int i=0;i<n;i++)
   {
     scanf("%d",&arr[i]);
   }
   selectionSort(arr,n);
     printf("Array after sorting \n");
   for(int i=0;i<n;i++)
   {
     printf("%d",arr[i]);
   }
  } 
   
   /*
   Output
   Enter number of element
   5
   Enter element of array
   23 48 98 11 25
   Array after sorting
   11 23 25 48 98
   */
   //Time Complexity of selection sort
   In all the case its time complexity is O(n^2) which make it worst for large data set
   //Space Complexity O(1)
